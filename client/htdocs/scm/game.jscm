;; -*- mode: scheme; -*-
;; Egglab Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define butterfly-speed 0.05)

(load "scm/butterfly/chromosome.jscm")
(load "scm/butterfly/gui.jscm")
(load "scm/butterfly/butterfly.jscm")
(load "scm/butterfly/morph.jscm")

(define edible-model (list (list)))
(define toxic-model (list (list)))

(define pop-size 15)
(define butterfly-list ())
(define edible-chromo ())
(define toxic-chromo ())
(define toxic-example ())
(define bg-tex (load-texture "bg.png"))
(define title-tex (load-texture "title.png"))
(define flash 0)
(define toxic-flash 0)
(define health 100)
(define hint-dur 100)
(define hint-time 100)
(define replenish-tick 0)
(define start-time 0)
(define edible-score 0)
(define toxic-score 0)
(define toxic-hit-time 1000)
(define player-age 0)
(define player-id 0)
(define player-game 0)
(define player-name "???")
(define health-dec 75)
(define replenish-speed 100)
(define butterfly-speed-mult 1)
(define edible-morph-count 100)
(define toxic-morph-count 100)

(server-call-ret "get-game-param" (list (list "key" "butterfly speed") (list "value" "1.0"))
                 (lambda (data) (set! butterfly-speed-mult (parseFloat data))))

(server-call-ret "get-game-param" (list (list "key" "flap rate") (list "value" "1.0"))
                 (lambda (data) (set! butterfly-flap-mult (parseFloat data))))

(server-call-ret "get-game-param" (list (list "key" "population size") (list "value" "15"))
                 (lambda (data)(set! pop-size (parseInt data))))

(server-call-ret "get-game-param" (list (list "key" "health decrease") (list "value" "75"))
                  (lambda (data) (set! health-dec (parseInt data))))

(server-call-ret "get-game-param" (list (list "key" "pop growth speed") (list "value" "100"))
                 (lambda (data) (set! replenish-speed (parseInt data))))

(server-call-ret "get-game-param" (list (list "key" "edible morph count") (list "value" "100"))
                 (lambda (data) (set! edible-morph-count (parseInt data))))

(server-call-ret "get-game-param" (list (list "key" "toxic morph count") (list "value" "100"))
                 (lambda (data) (set! toxic-morph-count (parseInt data))))


(define default-button-x (- (/ screen-width 2) 0))
(define default-button-y (+ (/ screen-height 2) 20))
(define button-gap 250)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; population stuff

(define (copy-list a)
  (map (lambda (i) i) a))

(define (build-population)

  ;; for some goodfersaken reason I have to 'deepcopy' the model here
  ;; with some awful nonsense code - otherwise the normalisation overwrites
  ;; the model???!!!! aarrrgggg
  (set! edible-chromo (list (gene-normalise (crop (shuffle (car (JSON.parse (JSON.stringify edible-model)))) edible-morph-count))))
  (set! toxic-chromo (list (gene-normalise (crop (shuffle (car (JSON.parse (JSON.stringify toxic-model)))) toxic-morph-count))))

  (set! butterfly-list
        (list
         (list (butterfly "edible" (chromosome-express edible-chromo))
               (butterfly "edible" (chromosome-express edible-chromo)))
         (list))))

(define (build-demo-population fn)
  (set! edible-chromo edible-model)
  (set! butterfly-list
        (list
         (build-list 15 fn))))

(define (build-comparison-population)
  (set! butterfly-list
        (list
         (build-list 48 (lambda (i)
                          (comp-butterfly
                           (- (* (modulo i 8) 1.9) 6.5)
                           (+ (quotient i 8) -3.5)
                           (chromosome-express edible-chromo))))
         ;(build-list 25 (lambda (i)
         ;                 (comp-butterfly
         ;                  (+ (* (modulo i 5) 1.9) 2)
         ;                  (+ (quotient i 5) -3.5)
         ;                  (chromosome-express chromo))))
         )))



(define (detect-hits butterfly-list c fn)
  ;; find closest index
  (let ((closest
         (index-foldl
          (lambda (i b r)
            (let ((pos (butterfly-screen-pos b)))
              (let ((dist (vdist (vector (game-mx c) (game-my c) 0) pos)))
                (if (< dist (car r))
                    (list dist i pos b) r))))
          (list 999999 -1 0 0)
          butterfly-list)))
    ;; if less than hit dist
    (cond
     ((< (car closest) 50)
      ;; remove it
      (fn (list-ref closest 3) (list-ref closest 2))
      (list #t (delete-n butterfly-list (cadr closest))))
     (else (list #f butterfly-list)))))

(define found 0)

(define (detect-hits-butterflies butterfly-list c)
  (let ((edible (detect-hits
                 (list-ref butterfly-list 0) c
                 (lambda (b pos)
                   (server-call
                    "eaten"
                    (list (list "player_id" player-id)
                          (list "morph" (car (butterfly-expr b)))
                          (list "toxic" 0)
                          (list "time_stamp" (Date.now))
                          (list "game" player-game)
                          (list "toxic_morph" (JSON.stringify toxic-chromo))))
                   (make-gobble (vx pos) (vy pos) 0 255 0 0.05)
                   (set! health (+ health 10))
                   (set! flash 255)
                   (set! found 1)
                   (set! edible-score (+ edible-score 1))
                   ;;(set! chromo (chromosome-remove-expression chromo (butterfly-expr b))))
                 )))
    (if (car edible) ;; edible hit detected
     (list (cadr edible) (list-ref butterfly-list 1))
     (list (list-ref butterfly-list 0)
           (cadr
            (detect-hits ;; search for toxic hits
             (list-ref butterfly-list 1) c
             (lambda (b pos)
               (server-call
                "eaten"
                (list (list "player_id" player-id)
                      (list "morph" (car (butterfly-expr b)))
                      (list "toxic" 1)
                      (list "time_stamp" (Date.now))
                      (list "game" player-game)
                      (list "toxic_morph" (JSON.stringify toxic-chromo))))
               (make-gobble (vx pos) (vy pos) 255 0 0 0.01)
               (set! health (- health 15))
               (set! toxic-flash 255)
               (set! toxic-hit-time 0)
               (set! toxic-score (+ toxic-score 1))
               (set! toxic-example (example-butterfly (butterfly-expr b)))
               )))))))

(define (replenish type butterfly-list fn)
  (if (< (length butterfly-list) pop-size)
      (cons (butterfly type (fn)) butterfly-list)
      butterfly-list))

(define (replenish-butterflies butterfly-list)
  (list
   (replenish "edible" (list-ref butterfly-list 0) (lambda () (chromosome-express edible-chromo)))
   (replenish "toxic" (list-ref butterfly-list 1) (lambda () (chromosome-express toxic-chromo)))))



(define (render-intro)
  (set! butterfly-list (map update-butterflies butterfly-list))
  (for-each render-butterflies butterfly-list)

;  (with-state
;   (texture title-tex)
;   (translate (vector 10 -4.5 0))
;   (scale (vector 18 18 18))
;   (render-big-butterfly))

  (with-state
   (texture bg-tex)
   (translate (vector 0 0 -100))
   (scale (vector 100 100 100))
   (draw-cube)))

(define (render-game)
  (set! butterfly-list (map update-butterflies butterfly-list))
  (for-each render-butterflies butterfly-list)

  (with-state
   (texture bg-tex)
   (translate (vector 0 0 -100))
   (scale (vector 100 100 100))
   (draw-cube)))

(define comp-time 0)

(define (render-comparison)
  (set! butterfly-list
        (list
         (update-comp-butterflies (list-ref butterfly-list 0) 0.01)
         ))

  (for-each render-butterflies butterfly-list)

;  (with-state
;   (texture title-tex)
;   (translate (vector 10 -4.5 0))
;   (scale (vector 18 18 18))
;   (render-big-butterfly))

  (with-state
   (texture bg-tex)
   (translate (vector 0 0 -100))
   (scale (vector 100 100 100))
   (draw-cube)))


(define (render-more-info-1)
  (set! butterfly-list
        (list
         (update-comp-butterflies (list-ref butterfly-list 0) 0.01)
         (update-comp-butterflies (list-ref butterfly-list 1)
                                  (if (< (- (time) comp-time) 2) 0 0.01))))

  (for-each render-butterflies butterfly-list)

  (with-state
   (translate (vector 0 2 0))
   (scale (vector 0.75 0.75 0.75))
   (render-butterfly toxic-example))

  (with-state
   (texture bg-tex)
   (translate (vector 0 0 -100))
   (scale (vector 100 100 100))
   (draw-cube)))

(define (render-more-info-2)
   (with-state
   (translate (vector 0 -1.4 0))
   (scale (vector 0.75 0.75 0.75))
   (render-butterfly toxic-example))

  (with-state
   (texture bg-tex)
   (translate (vector 0 0 -100))
   (scale (vector 100 100 100))
   (draw-cube)))



(define (nightjar-intro c)
  (set! player-game 0)
  (set! player-name "???")
  (every-frame (render-intro))
  (build-demo-population
   (lambda (i)
     (let ((i (* i (/ (* 2 3.141) 15))))
       (demo-butterfly
        (vector 0 0 0) (vector (sin i) (cos i) 0)
        (* i 0.1) 0 0.01 10))))
  (game-modify-mouse-hook
   (lambda (e c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "bold 50pt amatic")
      (wrap-shadow-text ctx "Hungry Bird Game" 0 380)
      (set! ctx.font "bold 30pt amatic")
      (wrap-text ctx "Catch butterflies for citizen science!" 0 430))
    (game-modify-buttons
     (list
      (image-button
       "PLAY!" 470 550 "jumpy" (find-image "button.png")
       (lambda (c)
         (play-sound "sounds/button.wav")
         (build-population)
         (nightjar-age-screen c)))

      (image-button
       "Hall of fame" 770 550 "jumpy" (find-image "button.png")
       (lambda (c)
         (server-call-mutate
          "hiscores" ()
          (lambda (game data)
            (play-sound "sounds/button.wav")
            (let ((hiscores (JSON.parse data)))
              (build-population)
              (nightjar-hiscores hiscores game #t))))
         c))

      (image-button
       "Made by" 620 710 "" (find-image "foam-logo-wos.png")
       (lambda (c)
         (play-sound "sounds/button.wav")
         (set! window.location "http://fo.am/kernow")
         c)))
     c))))


(define (nightjar-age-screen c)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "bold 50pt amatic")
     (wrap-shadow-text ctx "What is your age?" 0 100)
     (set! ctx.font "bold 30pt amatic"))
   (game-modify-buttons
    (let ((age-but
           (lambda (title id)
             (image-button
              title
              default-button-x
              (+ (- default-button-y 350) (* id 130))
              "jumpy"
              (find-image "button.png")
              (lambda (c)
                (play-sound "sounds/button.wav")
                (set! player-age id)
                (nightjar-played-before-screen c))))))

      (list
       (age-but "Younger than 10" 1)
       (age-but "10 to 15" 2)
       (age-but "16 to 35" 3)
       (age-but "36 to 50" 4)
       (age-but "Older than 50" 5))
     )
    c)))

(define (nightjar-played-before-screen c)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "bold 50pt amatic")
     (wrap-shadow-text
      ctx "Have you played this game before?" 0 150)
     (set! ctx.font "bold 30pt amatic"))
   (game-modify-buttons
    (list

     (image-button
      "Yes"
      470
      default-button-y
      "jumpy"
      (find-image "button.png")
      (lambda (c)
        (play-sound "sounds/button.wav")
        (server-call-ret
         "player"
         (list (list "played_before" 1)
               (list "age_range" player-age))
         (lambda (data)
           (set! player-id (car (JSON.parse data)))))

        (nightjar-show-toxic c)))

     (image-button
      "No"
      770
      default-button-y
      "jumpy"
      (find-image "button.png")
      (lambda (c)
        (play-sound "sounds/button.wav")

        (server-call-ret
         "player"
         (list (list "played_before" 0)
               (list "age_range" player-age))
         (lambda (data)
           (set! player-id (car (JSON.parse data)))))

        (nightjar-show-toxic c)))
    ) c)))

(define (nightjar-show-toxic c)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "bold 40pt amatic")
     (wrap-shadow-text ctx "You are a hungry bird!" 0 400)
     (wrap-shadow-text ctx "Eat the butterflies to stay alive!" 0 480)
     (draw-health ctx 450 30 100 100)
     (set! ctx.fillStyle "#fff")
     (set! ctx.strokeStyle "#fff")
;;     (set! ctx.font "normal 30pt amatic")
;;     (wrap-text ctx "Tip - try to remember the wing patterns." 0 500)
     )
   (game-modify-buttons
    (list

     (image-button
      "GO!" 620 650 "jumpy" (find-image "button.png")
      (lambda (c)
        (play-sound "sounds/button.wav")
        (set! health 100)
        (set! start-time (time))
        (set! hint-time 100)
        (set! edible-score 0)
        (set! toxic-score 0)
        (set! toxic-hit-time 1000)
        (nightjar-game c)))

     )
    c)))

(define (nightjar-game c)
  (every-frame (render-game))
  (game-modify-update
   (lambda (t c)
     (if (< health 1)
         (begin
           (server-call
            "score"
            (list
             (list "player_id" player-id)
             (list "score" (- (time) start-time))))
           (nightjar-game-over c))
         c))
  (game-modify-mouse-hook
   (lambda (e c)
     (when (and (eq? e "down") (> toxic-hit-time 99))
           (set! butterfly-list (detect-hits-butterflies butterfly-list c))
           ;; instantly replace edible butterfly
           (when (not (zero? found))
                 (set! butterfly-list
                       (list
                        (replenish "edible" (list-ref butterfly-list 0) (lambda () (chromosome-express edible-chromo)))
                        (list-ref butterfly-list 1)))
                 (set! found 0)))

     c)
   (game-modify-render
    (lambda (ctx)

      (when (> replenish-tick 50)
            (set! replenish-tick 0)
            (set! butterfly-list (replenish-butterflies butterfly-list)))
      (set! replenish-tick (+ (* replenish-speed (game-time-delta c)) replenish-tick))


      (set! flash (* flash 0.9))
      (set! toxic-flash (* toxic-flash 0.9))
      (set! health (clamp (- health (* health-dec (game-time-delta c))) 0 100))
      (set! hint-time (+ hint-time 0.1))


      ;; (draw-pie ctx 1100 700 health 100 0 220 120)

      (when (> flash 10)
            (draw-flash ctx 495 65
                        200
                        0 255 0 (/ flash 255)))

      (when (> toxic-flash 10)
            (draw-flash ctx 495 65
                        200
                        255 127 200 (/ toxic-flash 255)))


      (set! ctx.strokeStyle "#fff")

      (when (and (< health 20) (< (modulo hint-time 2) 1))
            (set! ctx.fillStyle "#f00")
            (set! ctx.font "bold 40pt amatic")
            (wrap-shadow-text ctx "Health Is Low!" 0 400))

      (when (and (< toxic-hit-time 100))
            (set! toxic-hit-time (+ toxic-hit-time (* 600 (game-time-delta c))))
            (set! ctx.fillStyle "#f00")
            (set! ctx.font "bold 60pt amatic")
            (draw-toxic-bg ctx)
            (set! ctx.fillStyle "#fff")
            (wrap-text ctx "UGH!" 0 200 500 100)
            (set! ctx.font "bold 50pt amatic")
            (wrap-shadow-text ctx "That butterfly tasted disgusting!" 0 700)
            (with-state
             (translate (vector 0 -0.3 2))
             (render-butterfly toxic-example)))

      (draw-health ctx 450 30 health 100)

      (draw-gobble ctx)
      )
    (game-modify-buttons
     (list
      )
     c)))))

(define (nightjar-game-over c)
  (let ((score (number-display (- (time) start-time))))
    (set! comp-time (time))
    (build-comparison-population)
    (every-frame (render-comparison))
    (game-modify-update
     (lambda (t c) c)
     (game-modify-mouse-hook
      (lambda (e c) c)
      (game-modify-render
       (lambda (ctx)
         (set! ctx.font "normal 40pt amatic")
         (wrap-shadow-text ctx "Game Over" 0 100)
         (set! ctx.font "bold 40pt amatic")
         (wrap-shadow-text ctx (string-append "You survived " score " seconds") 0 170)
         (set! ctx.font "normal 35pt amatic")
         (wrap-shadow-text ctx "Thankyou for playing!" 0 240)

         (set! ctx.fillStyle "#fff")

         (set! ctx.font "normal 40pt amatic"))
       (game-modify-buttons
        (append
         (list
;;         (image-button
;;          "Learn more" 500 750 "jumpy" (find-image "button.png")
;;          (lambda (c)
;;            (nightjar-more-info-1 c)))
         (image-button
          "Play again!" 320 750 "jumpy" (find-image "button.png")
          (lambda (c)
            (play-sound "sounds/button.wav")
            (build-population)
            (every-frame (render-intro))
            (set! player-game (+ player-game 1))
            (nightjar-show-toxic c)))
         (image-button
          "Exit" 920 750 "jumpy" (find-image "button.png")
          (lambda (c)
            (play-sound "sounds/button.wav")
            (nightjar-intro c))))

         (if (eq? player-name "???")
             (list
              (image-button
               "Enter your name" 620 750 "jumpy" (find-image "button.png")
               (lambda (c)
                 (play-sound "sounds/button.wav")
                 (build-population)
                 (every-frame (render-intro))
                 (nightjar-enter-name c))))
             (list
              (image-button
               "Hall of fame" 620 750 "jumpy" (find-image "button.png")
               (lambda (c)
                 (play-sound "sounds/button.wav")
                 (build-population)
                 (every-frame (render-intro))
                 (server-call-mutate
                  "hiscores" ()
                  (lambda (game data)
                    (let ((hiscores (JSON.parse data)))
                      (nightjar-hiscores hiscores game #f))))
                 c)))
              )

         )
        c))))))


(define (type-into str ch)
  (car
   (foldl
    (lambda (c r)
      (if (and (not (cadr r)) (eq? c "?"))
          (list (string-append (car r) ch) #t)
          (list (string-append (car r) c) (cadr r))))
    (list "" #f)
    (str.split ""))))

(define (type-into-delete str)
  (car (foldl
        (lambda (c r)
          ;;(console.log (list c r))
          (if (and (not (cadr r)) (not (eq? c "?")))
              (list (string-append "?" (car r)) #t)
              (list (string-append c (car r)) (cadr r))))
        (list "" #f)
        (reverse (str.split "")))))

(define (type-username ch c)
  (set! player-name (type-into player-name ch))
  c)

(define (type-delete c)
  (set! player-name (type-into-delete player-name))
  c)

(define (nightjar-enter-name c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "bold 30pt amatic")
      (wrap-shadow-text ctx "Enter your name" 0 200 1000 70)
      (set! ctx.font "bold 50pt amatic")
      (wrap-shadow-text ctx player-name 0 280 1000 70)
      (set! ctx.font "bold 30pt amatic"))

    (game-modify-buttons
     (append
      (index-map
       (lambda (i ch)
         (let ((x (+ 100 (* (modulo i 10) 105)))
               (y (+ 400 (* (Math.floor (/ i 10)) 130))))
           (image-button ch x y #f (find-image "button-small.png")
                         (lambda (c)
                           (play-sound "sounds/button.wav")
                           (msg ch)
                           (msg player-name)
                           (type-username ch c)))))
       (list "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
             "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"))

      (list
       (image-button "Delete" 850 700 #t (find-image "button.png")
                     (lambda (c)
                       (play-sound "sounds/button.wav")
                       (type-delete c)))

       (image-button "Done" 1100 700 #t (find-image "button.png")
                     (lambda (c)
                       (server-call-ret
                        "player-name"
                        (list
                         (list "player_id" player-id)
                         (list "player_name" player-name))
                        (lambda (data)
                          (play-sound "sounds/button.wav")
                          (server-call-mutate
                           "hiscores" ()
                           (lambda (game data)
                             (let ((hiscores (JSON.parse data)))
                               (nightjar-hiscores hiscores game #f))))
                          c)))))
                     )
     c))))




(define (nightjar-hiscores table c return-to-intro)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "bold 50pt amatic")
      (wrap-shadow-text ctx (string-append "Hall of fame") 0 100 1000 70)
      (set! ctx.font "bold 30pt amatic")

      (index-for-each
       (lambda (i e)
         (when (not (eq? (cadr e) 0))
               (let ((txt (string-append (car e) " : " (number-display (cadr e)))))
                 (if (eq? i 0)
                     (text-flashy-render ctx txt 550 (+ 240 (* 40 i)) (game-time c))
                     (ctx.fillText txt 565 (+ 240 (* 40 i))))))
         (set! ctx.fillStyle "#fff"))
       table)

      )
    (game-modify-buttons

     (if return-to-intro
         (list
          (image-button
           "Back" 620 720 "jumpy" (find-image "button.png")
           (lambda (c)
             (play-sound "sounds/button.wav")
             (if return-to-intro
                 (nightjar-intro c)
                 (nightjar-restart c)))))
         (list
          (image-button
           "Play again!" 320 720 "jumpy" (find-image "button.png")
           (lambda (c)
             (play-sound "sounds/button.wav")
             (build-population)
             (every-frame (render-intro))
             (set! player-game (+ player-game 1))
             (nightjar-show-toxic c)))
          (image-button
           "Exit" 920 720 "jumpy" (find-image "button.png")
           (lambda (c)
             (play-sound "sounds/button.wav")
             (nightjar-intro c))))

         )
     c))))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; startup
(set! ctx.font "normal 10pt amatic")

(load-images!
 (append
  (list
   "heliconius.png"
   "plus.png"
   "minus.png"
   "button.png"
   "button-small.png"
   "alelle-1.png"
   "alelle-2.png"
   "alelle-3.png"
   "alelle-4.png"
   "alelle-5.png"
   "health.png"
   "foam-logo-wos.png"
   ))
 (lambda ()
   (server-call-ret
    "get-morphs" (list (list "type" "edible"))
    (lambda (data)
      (set! edible-model
            (list
             (foldl
              (lambda (m r)
                (if (morph-active m)
                    (cons (allele (morph-texture-name m) (morph-probability m)) r)
                    r))
              ()
              (JSON.parse data))))

      (server-call-ret
       "get-morphs" (list (list "type" "toxic"))
       (lambda (data)
         (set! toxic-model
               (list
                (foldl
                 (lambda (m r)
                   (if (morph-active m)
                       (cons (allele (morph-texture-name m) (morph-probability m)) r)
                       r))
                 ()
                 (JSON.parse data))))

         (msg toxic-model)

         (start-game canvas ctx)
         ))))))
