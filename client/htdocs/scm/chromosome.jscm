;; -*- mode: scheme; -*-

(foldl
 (lambda (i r)
   (msg i) 0)
 0
 (list 1 2 3 4))


(msg "0000000000000000000000000000000000000000000000000000000")

(define (list-replace l i v)
  (cond
    ((null? l) l)
    ((zero? i) (cons v (list-replace (cdr l) (- i 1) v)))
    (else (cons (car l) (list-replace (cdr l) (- i 1) v)))))


(define (allele id probability)
  (list id probability))

(define (allele-id a) (list-ref a 0))
(define (allele-probability a) (list-ref a 1))
(define (allele-modify-probability a v) (list-replace a 1 v))

;; a gene is simply a list of alleles

(define (gene-cumulative gene)
  (foldl (lambda (a b) (+ a b)) 0 (map cadr gene)))

(define (gene-normalise gene)
  (let ((total (gene-cumulative gene)))
    (map (lambda (allele)
           (allele-modify-probability
            allele
            (/ (allele-probability allele) total)))
         gene)))

(define (gene-express gene)
  (let ((v (random)))
    (car
     (cadr
      (foldl
       (lambda (allele r)
         (let ((segment (+ (car r) (allele-probability allele))))
           (if (and (not (cadr r))
                    (< v segment))
               (list segment allele)
               (list segment (cadr r)))))
       (list 0 #f)
       gene)))))

(define (gene-remove-expression gene expr)
  (gene-normalise
   (map
    (lambda (allele)
      (if (eq? (allele-id allele) expr)
          (allele-modify-probability
           allele
           (max 0 (- (allele-probability allele) 0.05)))
          allele))
    gene)))

;; a chromosome is simple a list of genes

(define (chromosome-express chromo)
  (map gene-express chromo))

;; an expression is a list of allele ids

(define (chromosome-remove-expression chromo expr)
  (map gene-remove-expression chromo expr))
